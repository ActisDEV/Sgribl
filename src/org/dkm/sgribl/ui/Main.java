/*
 * The MIT License
 *
 * Copyright 2017 Denis Karev.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.dkm.sgribl.ui;

import javax.swing.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
/**
 *
 * @author Денис
 */
public class Main extends javax.swing.JFrame {
    
    JFileChooser openChooser;
    File usingFile;
    boolean isSavedAs = false;
    boolean isSaved = false;
    
    Desktop desktop;
    /*
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScroll = new javax.swing.JScrollPane();
        mainArea = new javax.swing.JTextArea();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newItem = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        firstSeparator = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sgribl Editor");

        mainScroll.setName("mainScroll"); // NOI18N

        mainArea.setColumns(20);
        mainArea.setRows(5);
        mainArea.setName("mainArea"); // NOI18N
        mainArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mainAreaKeyTyped(evt);
            }
        });
        mainScroll.setViewportView(mainArea);

        mainMenu.setName("mainMenu"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newItem.setText("New");
        newItem.setName("newItem"); // NOI18N
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });
        fileMenu.add(newItem);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open");
        openItem.setName("openItem"); // NOI18N
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save");
        saveItem.setName("saveItem"); // NOI18N
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setText("Save as...");
        saveAsItem.setName("saveAsItem"); // NOI18N
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsItem);

        firstSeparator.setName("firstSeparator"); // NOI18N
        fileMenu.add(firstSeparator);

        exitItem.setText("Exit");
        exitItem.setName("exitItem"); // NOI18N
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        mainMenu.add(fileMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        if (isSaved == false) {
            int reply = JOptionPane.showConfirmDialog(null, "File is not saved! Are you sure?", "Progress not saved", JOptionPane.YES_NO_OPTION);
            switch (reply) {
                case 0: System.exit(0);
                case 1: this.saveItemActionPerformed(evt);
                case -1: break;
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_exitItemActionPerformed

    private void newItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemActionPerformed
        if (isSaved == false) {
             int reply = JOptionPane.showConfirmDialog(null, "File is not saved! Are you sure?", "Progress not saved", JOptionPane.YES_NO_OPTION);
             switch (reply) {
                case 0: 
                     mainArea.setText(null);
                     usingFile = null;
                     isSaved = false;
                     isSavedAs = false;
                     break;
                case 1: this.saveItemActionPerformed(evt);
                    break;
                case -1: break;
             }
        }
    }//GEN-LAST:event_newItemActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        openChooser = new JFileChooser();
        openChooser.setFileFilter(new FileNameExtensionFilter("Text file (.txt)", "txt"));
        int reply = openChooser.showOpenDialog(this);
        usingFile = openChooser.getSelectedFile();
        switch (reply) {
            case 0:
                try {
                    FileReader reader = new FileReader(usingFile);
                    mainArea.read(reader, usingFile);
                } catch (FileNotFoundException e) {
                    System.out.println("FileNotFoundException: " + e.getMessage());
                } catch (IOException e1) {
                    System.out.println("IOException: " + e1.getMessage());
                }
            case 1:
                break;
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        openChooser = new JFileChooser();
        openChooser.setFileFilter(new FileNameExtensionFilter("Text file (.txt)", "txt"));
        BufferedWriter writer;
        if (isSavedAs == false) {
            int reply = openChooser.showSaveDialog(this);
            usingFile = openChooser.getSelectedFile();
            switch (reply) {
            case 0 :
                try {
                    writer = new BufferedWriter(new FileWriter(usingFile, false));
                    mainArea.write(writer);
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                isSavedAs = true;
                isSaved = true;
            case 1: 
                break;
        }
        } else {
            try {
                writer = new BufferedWriter(new FileWriter(usingFile, false));
                mainArea.write(writer);
                writer.close();
            } catch (Exception e1) {
                System.out.println(e1.getMessage());
            }
            isSaved = true;
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        openChooser = new JFileChooser();
        openChooser.setFileFilter(new FileNameExtensionFilter("Text file (.txt)", "txt"));
        int reply = openChooser.showSaveDialog(this);
        usingFile = openChooser.getSelectedFile();
        BufferedWriter writer;
        switch (reply) {
            case 0 :
                try {
                    writer = new BufferedWriter(new FileWriter(usingFile, false));
                    mainArea.write(writer);
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                isSavedAs = true;
                isSaved = true;
            case 1: 
                break;
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void mainAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainAreaKeyTyped
        isSaved = false;
    }//GEN-LAST:event_mainAreaKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator firstSeparator;
    private javax.swing.JTextArea mainArea;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JScrollPane mainScroll;
    private javax.swing.JMenuItem newItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    // End of variables declaration//GEN-END:variables
}
